#final_time = 1000
#final_time = 6000000000  #before earthquake
final_time = 7889238000  #250 years
#final_time = 9467085600  #300 years
#final_time = 12622780800 #400 years
#final_time = 31556952000 #1000 years
mesh_file = "bp1_sym.msh"

[seas]
type = "poisson"
lib = "bp1_sym.lua"
boundary = "boundary"
mu = "mu"
ref_normal = [1, 0]

[friction]
lib = "bp1_sym.lua"
a = "a"
eta = "eta"
sn_pre = "sn_pre"
tau_pre = "tau_pre"
Vinit = "Vinit"
    [friction.constant]
    b = 0.015
    V0 = 1.0e-6
    L = 0.008
    f0 = 0.6

[output]
prefix = "bp1_sym"
V_ref = 0.001
t_min = 0.05
t_max = 9460800

[solver]
adapt_wnormtype = "infinity"        # general norm to use (2 or infinity)
ksp_type = "preonly"                # to solve the Poisson problem
pc_type = "lu"                      # to solve the Poisson problem
pc_factor_mat_solver_type = "mumps" # to solve the Poisson problem

    [solver.aseismic_slip]
    solution_size = "extended"              # compact   or extended
    problem_formulation="dae"               # ode       or dae
    type = "bdf"                             # rk        or bdf
    rk_type = "5dp"                         # as in PETSc
    bdf_order = 5                           # 0: adaptive order, 1-6: fixed order
    S_atol = 1e-8                              # default - 1e-8
#    S_atol = 0                              # default - 0
    S_rtol = 0                              # default - 0
    psi_atol = 1e-10                            # default - 1e-10
#    psi_atol = 0                            # default - 0
    psi_rtol = 0                            # default - 0
    V_atol = 0                              # only for extended ode! default - 0           
    V_rtol = 0                              # only for extended ode! default - 1e-8
#    V_rtol = 1e-8                              # only for extended ode! default - 1e-8
    bdf_custom_error_evaluation = false     # if true: use higher order embedded BDF method (no adaptive BDF order possible)
    bdf_custom_Newton_iteration = true      # needed for extended ode and if bdf_custom_LU_solver is true
    custom_time_step_adapter = false        # currently no functionality
    bdf_custom_LU_solver = true             # solve a reduced Jacobian system (only DAE formulations)
    bdf_ksp_type = "gmres"                  # to solve the Jacobian system in the Newton iteration
    bdf_pc_type = "sor"                     # to solve the Jacobian system in the Newton iteration

    [solver.earthquake]
    solution_size = "extended"              # compact   or extended
    problem_formulation="dae"               # ode       or dae
    type = "bdf"                            # rk        or bdf
    rk_type = "5dp"                         # as in PETSc
    bdf_order = 5                          # 0: adaptive  order, 1-6: fixed order
    S_atol = 1e-5                          # default - 1e-5
#    S_atol = 0                              # default - 0
    S_rtol = 0                              # default - 0
    psi_atol = 1e-7                        # default - 1e-7
#    psi_atol = 0                            # default - 0
    psi_rtol = 0                            # default - 0
    V_atol = 0                              # only for extended ode! default - 0                   
    V_rtol = 0                             # only for extended ode! default - 1e-7
#    V_rtol = 1e-7                           # only for extended ode! default - 1e-7
    bdf_custom_error_evaluation = false     # if true: use higher order embedded BDF method (no adaptive BDF order possible)
    bdf_custom_Newton_iteration = true      # needed for extended ode and if bdf_custom_LU_solver is true
    custom_time_step_adapter = false        # currently no functionality
    bdf_custom_LU_solver = true            # solve a reduced Jacobian system (only DAE formulations)
    bdf_ksp_type = "gmres"                  # to solve the Jacobian system in the Newton iteration
    bdf_pc_type = "sor"                     # to solve the Jacobian system in the Newton iteration